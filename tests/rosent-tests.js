// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    baseUrl: "http://localhost:8181/rest/v1/"
  },
  environment: {
    baseUrl: `http://${__ENV.TEST_HOST_PORT}/rest/v1`,
    XRosetteAPIKey: "not-needed-for-enterprise"
  }
});

export default function() {
  group("address-similarity", function() {
    postman[Request]({
      name: "Supported languages",
      id: "6c6d21c8-5a71-4cbb-93c2-24b2baeb3ba3",
      method: "GET",
      address: "{{baseUrl}}/address-similarity/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguagePairs).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Match addresses from input",
      id: "b53e0846-4d85-4f98-83e3-6eecc64dcfbd",
      method: "POST",
      address: "{{baseUrl}}/address-similarity",
      data:
        '{\n    "address1": {\n        "houseNumber": 1600,\n        "road": "Pennsylvania Ave. NW",\n        "city": "Washington",\n        "state": "D.C.",\n        "postCode": 20500\n    },\n    "address2": {\n        "houseNumber": 160,\n        "road": "Pennsilvana Avenue",\n        "city": "Washington",\n        "state": "D.C.",\n        "postCode": 20500\n    }\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
        pm.test(
          "Validate address-similarity, score > 0.5 (if licensed)",
          function() {
            if (responseCode.code === 200) {
              var res = pm.response.json();
              pm.expect(res.score > 0.5).to.be.true;
            }
          }
        );
      }
    });
  });

  group("categories", function() {
    postman[Request]({
      name: "Supported languages",
      id: "cf388a81-757a-4d76-a902-f5fa105a8a9a",
      method: "GET",
      address: "{{baseUrl}}/categories/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Identify contextual categories in the input.",
      id: "58b0fbcd-0094-43d1-b147-0f977bfa8690",
      method: "POST",
      address: "{{baseUrl}}/categories",
      data:
        '{\n    "content": "If you are a fan of the British television series Downton Abbey and you are planning to be in New York anytime before April 2nd, there is a perfect stop for you while in town."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test(
          "Validate categories response, results sorted (if licensed)",
          function() {
            if (responseCode.code === 200) {
              var res = pm.response.json();
              var lastConfidence = -1;
              var sorted = 1;
              for (var i = 0; i < res.categories.length; i++) {
                if (lastConfidence === -1) {
                  lastConfidence = res.categories[i].confidence;
                } else {
                  if (lastConfidence < res.categories[i].confidence) {
                    sorted = 0;
                    break;
                  }
                  lastConfidence = res.categories[i].confidence;
                }
              }
              pm.expect(sorted === 1).to.be.true;
            }
          }
        );
        pm.test("Response time is less than 300ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(300);
        });
      }
    });
  });

  group("entities", function() {
    postman[Request]({
      name: "Supported languages",
      id: "1ace14c0-a80a-49d8-927e-96dbdfbf78b7",
      method: "GET",
      address: "{{baseUrl}}/entities/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name:
        "Extracts entities from a document and links them to a knowledge base.",
      id: "e8167a61-9e15-46a0-91cc-83f24df84562",
      method: "POST",
      address: "{{baseUrl}}/entities",
      data:
        '{\n    "content": "The Securities and Exchange Commission today announced the leadership of the agency’s trial unit.  Bridget Fitzpatrick has been named Chief Litigation Counsel of the SEC and David Gottesman will continue to serve as the agency’s Deputy Chief Litigation Counsel. Since December 2016, Ms. Fitzpatrick and Mr. Gottesman have served as Co-Acting Chief Litigation Counsel.  In that role, they were jointly responsible for supervising the trial unit at the agency’s Washington D.C. headquarters as well as coordinating with litigators in the SEC’s 11 regional offices around the country."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate entities response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.entities).to.have.lengthOf.at.least(1);
            pm.expect(res.entities[0]).to.include({
              type: "ORGANIZATION",
              count: 3
            });
          }
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("language", function() {
    postman[Request]({
      name: "Supported languages",
      id: "c1e0416d-7143-4bff-aab7-ec7e5fb204da",
      method: "GET",
      address: "{{baseUrl}}/language/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Identifies the language(s) in a document",
      id: "1882a9fc-57fa-494b-826f-613e195e7bc7",
      method: "POST",
      address: "{{baseUrl}}/language",
      data: '{\n    "content": "Por favor Señorita, says the man"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate language response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.languageDetections).to.have.lengthOf.at.least(1);
            pm.expect(res.languageDetections[0]).to.include({
              language: "spa"
            });
          }
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("morphology", function() {
    group("complete", function() {
      postman[Request]({
        name: "Supported languages",
        id: "78196da3-d46e-4ef5-ae4f-40e114bdb794",
        method: "GET",
        address: "{{baseUrl}}/morphology/complete/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Runs morphological analysis on input",
        id: "26814811-4902-4a64-a9e4-d584a32c91aa",
        method: "POST",
        address: "{{baseUrl}}/morphology/complete",
        data:
          '{\n    "content": "The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
          pm.test(
            "Validate morphology/lemmas (Tokens and lemmas are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.lemmas.length).to.be.true;
              }
            }
          );
          pm.test(
            "Validate morphology/parts-of-speech (Tokens and posTags are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.posTags.length).to.be.true;
              }
            }
          );
          pm.test(
            "Validate morphology/compound-components (Tokens and compound components are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.compoundComponents.length)
                  .to.be.true;
              }
            }
          );
          pm.test(
            "Validate morphology/han-readings (Tokens and hanReadins are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.hanReadings.length).to.be
                  .true;
              }
            }
          );
        }
      });
    });

    group("lemmas", function() {
      postman[Request]({
        name: "Supported languages",
        id: "374dbecb-325b-4f70-99e2-16eb69393c2c",
        method: "GET",
        address: "{{baseUrl}}/morphology/lemmas/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Runs morphological analysis on input",
        id: "860a4cd7-48b6-4990-83ca-c5ec9d4bcc28",
        method: "POST",
        address: "{{baseUrl}}/morphology/lemmas",
        data:
          '{\n    "content": "The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
          pm.test(
            "Validate morphology/lemmas (Tokens and lemmas are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.lemmas.length).to.be.true;
              }
            }
          );
        }
      });
    });

    group("parts-of-speech", function() {
      postman[Request]({
        name: "Supported languages",
        id: "4bb694ed-90e0-442b-9adf-4300f9cc37f7",
        method: "GET",
        address: "{{baseUrl}}/morphology/parts-of-speech/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Runs morphological analysis on input",
        id: "7e384804-eb08-456a-993b-188ed8621b13",
        method: "POST",
        address: "{{baseUrl}}/morphology/parts-of-speech",
        data:
          '{\n    "content": "The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
          pm.test(
            "Validate morphology/parts-of-speech (Tokens and posTags are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.posTags.length).to.be.true;
              }
            }
          );
        }
      });
    });

    group("compound-components", function() {
      postman[Request]({
        name: "Supported languages",
        id: "7091ae7d-428d-462e-8798-9c6a6930e104",
        method: "GET",
        address:
          "{{baseUrl}}/morphology/compound-components/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Runs morphological analysis on input",
        id: "56541ee3-a58f-4016-b70d-6f950155999e",
        method: "POST",
        address: "{{baseUrl}}/morphology/compound-components",
        data:
          '{\n    "content": "The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
          pm.test(
            "Validate morphology/compound-components (Tokens and compound components are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.compoundComponents.length)
                  .to.be.true;
              }
            }
          );
        }
      });
    });

    group("han-readings", function() {
      postman[Request]({
        name: "Supported languages",
        id: "de49c571-7e57-4fc7-ad40-fbc5fe4b33df",
        method: "GET",
        address: "{{baseUrl}}/morphology/han-readings/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Runs morphological analysis on input",
        id: "a855a85c-28bd-48d7-b88a-1f9c811e0994",
        method: "POST",
        address: "{{baseUrl}}/morphology/han-readings",
        data:
          '{\n    "content": "The quick brown fox jumped over the lazy dog. 👍🏾 Yes he did. B"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
          pm.test(
            "Validate morphology/han-readings (Tokens and hanReadins are equal)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.tokens).to.have.lengthOf.at.least(1);
                pm.expect(res.tokens.length === res.hanReadings.length).to.be
                  .true;
              }
            }
          );
        }
      });
    });

    postman[Request]({
      name: "Supported languages",
      id: "7f3480df-5645-48bb-9c42-5a9bdc39c6b5",
      method: "GET",
      address: "{{baseUrl}}/morphology/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("name-deduplication", function() {
    postman[Request]({
      name: "Supported languages",
      id: "c214b938-c748-430d-9588-ac874bf3d3a6",
      method: "GET",
      address: "{{baseUrl}}/name-deduplication/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Deduplicates names from input",
      id: "d4cbb063-ae23-4b7c-afac-0a1528774733",
      method: "POST",
      address: "{{baseUrl}}/name-deduplication",
      data:
        '{\n    "names": [\n        {\n            "text": "Joe Smith"\n        },\n        {\n            "text": "Joe Smidge"\n        },\n        {\n            "text": "Alex Black"\n        }\n    ],\n    "threshold": 0.8\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
        pm.test("Validate name-deduplication, all indices unique", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.results).to.deep.equal(["1", "2", "3"]);
          }
        });
      }
    });
  });

  group("name-similarity", function() {
    postman[Request]({
      name: "Supported languages",
      id: "aa2802bc-103e-45e5-ab08-1bf93e3eb72b",
      method: "GET",
      address: "{{baseUrl}}/name-similarity/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguagePairs).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Match names from input",
      id: "800e354c-c786-4ce5-b184-72c78495c224",
      method: "POST",
      address: "{{baseUrl}}/name-similarity",
      data:
        '{\n    "name1": "Michael Jackson",\n    "name2": "迈克尔·杰克逊"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
        pm.test("Validate name-similarity score > 0.5", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.score > 0.5).to.be.true;
          }
        });
      }
    });
  });

  group("name-translation", function() {
    postman[Request]({
      name: "Supported languages",
      id: "547c0ab2-426c-408a-9a47-c8a78087f21b",
      method: "GET",
      address: "{{baseUrl}}/name-translation/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguagePairs).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Translate names from input",
      id: "09978d79-c126-4d07-b362-1016266fc891",
      method: "POST",
      address: "{{baseUrl}}/name-translation",
      data:
        '{\n    "name": "معمر محمد أبو منيار القذاف",\n    "targetLanguage": "eng"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate name-translation response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.translation).to.eql(
              "Mu'ammar Muhammad Abu-Minyar al-Qadhaf"
            );
          }
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("relationships", function() {
    postman[Request]({
      name: "Supported languages",
      id: "fd5e52e5-230b-4c08-9a4b-9a7e07421ef7",
      method: "GET",
      address: "{{baseUrl}}/relationships/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Extract relationships from input",
      id: "76a1c19d-0b97-436f-960a-14ed7dce35dd",
      method: "POST",
      address: "{{baseUrl}}/relationships",
      data:
        '{\n    "content": "FLIR Systems is headquartered in Oregon and produces thermal imaging, night vision, and infrared cameras and sensor systems.  According to the SEC’s order instituting a settled administrative proceeding, FLIR entered into a multi-million dollar contract to provide thermal binoculars to the Saudi government in November 2008.  Timms and Ramahi were the primary sales employees responsible for the contract, and also were involved in negotiations to sell FLIR’s security cameras to the same government officials.  At the time, Timms was the head of FLIR’s Middle East office in Dubai."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate relationships response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.relationships).to.have.lengthOf.at.least(1);
            pm.expect(res.relationships).to.deep.include({
              predicate: "Organization Headquarters",
              predicateId: "ORG-HEADQUARTERS",
              arg1: "FLIR Systems",
              arg1Id: "Q5426537",
              arg2: "Oregon",
              arg2Id: "Q824"
            });
          }
        });
        pm.test("Response time is less than 500ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(500);
        });
      }
    });
  });

  group("semantics", function() {
    group("similar", function() {
      postman[Request]({
        name: "Supported languages",
        id: "35577d95-ca17-408b-b784-471f055dec85",
        method: "GET",
        address: "{{baseUrl}}/semantics/similar/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Finds terms similar to the input",
        id: "26fecea0-42b9-4600-a892-93dffae789b3",
        method: "POST",
        address: "{{baseUrl}}/semantics/similar",
        data:
          '{\n    "content": "spy",\n    "options": {\n        "resultLanguages": [\n            "eng",\n            "spa",\n            "deu",\n            "jpn"\n        ]\n    }\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test(
            "Validate semantics/similar response (if licensed)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.similarTerms.eng).to.have.length.at.least(1);
                pm.expect(res.similarTerms.eng).to.deep.include({
                  term: "spy",
                  similarity: 1.0
                });
              }
            }
          );
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });
    });

    group("vector", function() {
      postman[Request]({
        name: "Supported languages",
        id: "fa30dadc-70ce-43d9-9add-db6d5c3aa8e2",
        method: "GET",
        address: "{{baseUrl}}/semantics/vector/supported-languages",
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          pm.test("Check array size of at least 1", function() {
            var res = pm.response.json();
            pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
          });
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });

      postman[Request]({
        name: "Create embeddings from input",
        id: "a10682b4-3720-46a7-908a-4066a033404d",
        method: "POST",
        address: "{{baseUrl}}/semantics/vector",
        data: '{\n    "content": "Cambridge, Massachusetts"\n}',
        headers: {
          "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200 or 403 (not licensed)", function() {
            pm.expect(
              responseCode.code === 200 || responseCode.code === 403
            ).to.be.true;
          });
          pm.test(
            "Validate semantics/vector response (if licensed)",
            function() {
              if (responseCode.code === 200) {
                var res = pm.response.json();
                pm.expect(res.documentEmbedding).to.have.length.at.least(1);
              }
            }
          );
          pm.test("Response time is less than 200ms", function() {
            pm.expect(pm.response.responseTime).to.be.below(200);
          });
        }
      });
    });
  });

  group("sentences", function() {
    postman[Request]({
      name: "Supported languages",
      id: "9643d3e4-c3df-4227-b14d-2a732fa0aba8",
      method: "GET",
      address: "{{baseUrl}}/sentences/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Determine sentences",
      id: "cea092de-fc67-4551-9abe-3adcb0cc7b6a",
      method: "POST",
      address: "{{baseUrl}}/sentences",
      data:
        '{\n    "content": "This land is your land. This land is my land, from California to the New York island; from the red wood forest to the Gulf Stream waters. This land was made for you and Me. As I was walking that ribbon of highway, I saw above me that endless skyway: I saw below me that golden valley: This land was made for you and me."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate sentences response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.sentences).to.have.lengthOf.at.least(1);
            pm.expect(res.sentences).that.includes("This land is your land. ");
          }
        });

        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("sentiment", function() {
    postman[Request]({
      name: "Supported languages",
      id: "2d7d059c-30eb-44d4-badb-7da2da621f38",
      method: "GET",
      address: "{{baseUrl}}/sentiment/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Analyze sentiment of input",
      id: "404465ce-5531-4eb2-b002-2de1463607e1",
      method: "POST",
      address: "{{baseUrl}}/sentiment",
      data:
        '{\n    "content": "Original Ghostbuster Dan Aykroyd, who also co-wrote the 1984 Ghostbusters film, couldn’t be more pleased with the new all-female Ghostbusters cast, telling The Hollywood Reporter, “The Aykroyd family is delighted by this inheritance of the Ghostbusters torch by these most magnificent women in comedy.”"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate sentiment response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.entities).to.have.lengthOf.at.least(1);
            pm.expect(res.entities[0]).to.include(
              { mention: "Ghostbusters", count: 3 },
              "Ghostbusters isn't the first entry"
            );
          }
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("syntax/dependencies", function() {
    postman[Request]({
      name: "Supported languages",
      id: "2e99e9ab-540c-4269-b9c1-ec281f152ff0",
      method: "GET",
      address: "{{baseUrl}}/syntax/dependencies/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Create dependency data from input",
      id: "5cbcf03e-59a2-480a-a891-ef11f4090388",
      method: "POST",
      address: "{{baseUrl}}/syntax/dependencies",
      data:
        '{\n    "content": "Yoshinori Ohsumi, a Japanese cell biologist, was awarded the Nobel Prize in Physiology or Medicine on Monday."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test(
          "Validate syntax/dependencies response (if licensed)",
          function() {
            if (responseCode.code === 200) {
              var res = pm.response.json();
              pm.expect(res.sentences).to.have.lengthOf(1);
            }
          }
        );
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("tokens", function() {
    postman[Request]({
      name: "Supported languages",
      id: "aa2855a2-a3dc-44a2-b5a1-b0bfa0144c09",
      method: "GET",
      address: "{{baseUrl}}/tokens/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Tokenize input",
      id: "54fe3804-9389-406a-a23b-d98087a1eb69",
      method: "POST",
      address: "{{baseUrl}}/tokens",
      data: '{\n    "content": "北京大学生物系主任办公室内部会议"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate tokens response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.tokens).to.have.lengthOf.at.least(1);
            pm.expect(res.tokens).that.includes("办公室");
          }
        });

        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  group("topics", function() {
    postman[Request]({
      name: "Supported languages",
      id: "af0c94b9-4824-499b-a88a-df41248f88f9",
      method: "GET",
      address: "{{baseUrl}}/topics/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Check array size of at least 1", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(1);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Extract topics from input",
      id: "6f734355-4f80-4348-9471-a96d6efb4388",
      method: "POST",
      address: "{{baseUrl}}/topics",
      data:
        '{\n    "content": "Lily Collins is in talks to join Nicholas Hoult in Chernin Entertainment and Fox Searchlight\'s J.R.R. Tolkien biopic Tolkien. Anthony Boyle, known for playing Scorpius Malfoy in the British play Harry Potter and the Cursed Child, also has signed on for the film centered on the famed author. In Tolkien, Hoult will play the author of the Hobbit and Lord of the Rings book series that were later adapted into two Hollywood trilogies from Peter Jackson. Dome Karukoski is directing the project."\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate topics response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.keyphrases).to.have.lengthOf.at.least(1);
            pm.expect(res.concepts).to.have.lengthOf.at.least(1);
            pm.expect(res.keyphrases).to.deep.include({
              phrase: "J.R.R. Tolkien biopic Tolkien",
              salience: 1.0
            });
          }
        });
        pm.test("Response time is less than 500ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(500);
        });
      }
    });
  });

  group("transliteration", function() {
    postman[Request]({
      name: "Supported languages",
      id: "ea41b60f-3ba7-44eb-8b99-12d82a9b3c6f",
      method: "GET",
      address: "{{baseUrl}}/transliteration/supported-languages",
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
        pm.test("Check array size of at least 2", function() {
          var res = pm.response.json();
          pm.expect(res.supportedLanguages).to.have.lengthOf.at.least(2);
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });

    postman[Request]({
      name: "Runs transliteration on input",
      id: "b1762026-58e2-4296-9b90-0ebdc14e3bb9",
      method: "POST",
      address: "{{baseUrl}}/transliteration",
      data: '{\n    "content": "ana r2ye7 el gam3a el sa3a 3 el 3asr"\n}',
      headers: {
        "X-RosetteAPI-Key": "{{XRosetteAPIKey}}",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200 or 403 (not licensed)", function() {
          pm.expect(
            responseCode.code === 200 || responseCode.code === 403
          ).to.be.true;
        });
        pm.test("Validate transliteration response (if licensed)", function() {
          if (responseCode.code === 200) {
            var res = pm.response.json();
            pm.expect(res.transliteration).to.eql(
              "أنا رايح الجامعة الساعة ٣ العصر"
            );
          }
        });
        pm.test("Response time is less than 200ms", function() {
          pm.expect(pm.response.responseTime).to.be.below(200);
        });
      }
    });
  });

  postman[Request]({
    name: "Rosette information",
    id: "76951ccc-4a28-4c1b-bde1-ed732569d84e",
    method: "GET",
    address: "{{baseUrl}}/info",
    headers: {
      "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
      pm.test("Response time is less than 200ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(200);
      });
      pm.test("Validate Info response name", function() {
        var res = pm.response.json();
        pm.expect(res.name).to.eql("Rosette");
      });
    }
  });

  postman[Request]({
    name: "Ping Rosette",
    id: "329ff868-9072-4636-84e5-09bfaa8fd9ed",
    method: "GET",
    address: "{{baseUrl}}/ping",
    headers: {
      "X-RosetteAPI-Key": "{{XRosetteAPIKey}}"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });
      pm.test("Response time is less than 200ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(200);
      });
      pm.test("Validate Ping message", function() {
        var res = pm.response.json();
        pm.expect(res.message).to.eql("Rosette at your service");
      });
    }
  });
}
